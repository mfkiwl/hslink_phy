#################################################################
#
# Copyright (c) 2018- Stanford University. All rights reserved.
# 
# The information and source code contained herein is the 
# property of Stanford University, and may not be disclosed or
# reproduced in whole or in part without explicit written 
# authorization from Stanford University. Contact bclim@stanford.edu for details.
# 
# * Author     : Byong Chan Lim (bclim@stanford.edu)
# * Description: mProbo test configuration file for "lpf" example
# 
# * Note       :
# 
# * Revision   :
#   - 7/26/2016: First release
# 
#################################################################


[test1]
  description = This example shows a way to extract dynamic behavior of a circuit (i.e. a pole frequency) with post-processing routine. The pole frequency is adjusted by a voltage controlled resistor where its control input is `vctl`. The test samples the output response uniformly and store the result to a file (meas_out.txt). The post-processing routine (estimate_pole.py) is then fitting the response with a single-pole system model using nonlinear least square fit. Note how testbench->post-processor section calls the post-processing routine.
  [[simulation]]
    timeunit = 1fs
    trantime = 100us
  [[option]]
    max_sample = 10
    regression_sval_threshold = 1
  [[port]]
    [[[tau1]]]
      prohibited = 
      default_value = 0.0
      regions = 0.0, 1.0
      port_type = analogoutput
      pinned = False
      abstol = 1e-9
      gaintol = 15
      description = system's time constant [sec]
    #[[[fp1]]]
    #  prohibited = 
    #  default_value = 0.0
    #  regions = 0.0, 1e9
    #  port_type = analogoutput
    #  pinned = False
    #  abstol = 100000.0
    #  gaintol = 15
    #  description = system's pole frequency [Hz]
    [[[vctl]]]
      prohibited = 
      default_value = 1.0
      regions = 0, 0.9
      port_type = analoginput
      pinned = False
      description = voltage input to control the pole frequency
  [[testbench]]
    temperature = 50
    tb_code = """
lpf I0 (.in(net3),.vctl(net1),.out(net2));
vpulse #(.v0(0.0), .v1(1.0), .td(10e-9), .tr(1e-12), .tf(1e-12), .tw(1), .tp(1)) I4 (.vout(net3),.voutb(net04));
dump #(.filename("input.txt"),.te(100e-6),.ti(10E-12),.window(1),.ts(0)) I2i (.in(net3));
dump #(.filename("output.txt"),.te(100e-6),.ti(10E-12),.window(1),.ts(0)) I2o (.in(net2));
vdc #(.dc(@vctl)) I3 (.vout(net1));
detect_ss #(.ts(11e-9), .ti(10e-9), .tol(0.001)) xdetect (.in(net2), .detect(ss_detect));
finish_sim xfinish (.in(ss_detect));
amsgnd amsgnd (.gnd(gnd));
    """
    [[[post-processor]]]
      script_files = ${DAVE_SAMPLES}/util/postprocessor/filter_estimator.py
      command = python filter_estimator.py 5e-9 1e4 1e9 p1
