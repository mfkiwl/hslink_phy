#################################################################
#
# Copyright (c) 2018- Stanford University. All rights reserved.
# 
# The information and source code contained herein is the 
# property of Stanford University, and may not be disclosed or
# reproduced in whole or in part without explicit written 
# authorization from Stanford University. Contact bclim@stanford.edu for details.
# 
# * Author     : Byong Chan Lim (bclim@stanford.edu)
# * Description: mProbo test configuration file for "pfd" example
# 
# * Note       :
# 
# * Revision   :
#   - 7/26/2016: First release
# 
#################################################################


[DEFAULT] 

  [[option]]
    max_sample = 10
    regression_sval_threshold = 10.0 

  [[simulation]]
    timeunit = 10fs
    trantime = 1us
    
  [[port]]
    [[[phin]]] 
      port_type = analoginput
      regions = -2.10, 2.10
      pinned = False
      default_value = 0.0 
      description = Differential phase input
    [[[vdd]]] 
      port_type = analoginput
      regions = 0.95, 1.05
      pinned = False
      default_value = 1.0
      description = Power supply
    [[[rstb]]]
      port_type = digitalmode
      bit_width = 1
      encode = binary
      prohibited = 
      pinned = False
      default_value = b1
      description = Reset, active low

  [[testbench]]
    tb_code  = '''
parameter real ck_freq = 1e9;
pfd dut ( .vdd(vdd), .vss(gnd), .rstb(rstb), .ckref(ckref), .ckfb(ckfb), .up(up), .dn(dn) );
vdc #( .dc(@vdd) ) xvdd ( .vout(vdd) );
// use pulse instead of bitvector to initialize up/dn states
pulse #( .b0(@(1-rstb)), .td(0.5/ck_freq*0.2), .tw(1) , .tp(2) ) xrst ( .out(rstb) );

phase2ck_diff #( .ph_diff(@phin), .ph_cm(`M_TWO_PI), .freq(ck_freq), .duty(0.5) ) xphin ( .cko_lead(ckref), .cko_lag(ckfb) );
meas_pulsewidth #( .dir(1'b1), .vlth(0.5), .tstart(0.5/ck_freq) ) mpwup ( .in(up), .vdd(vdd), .pw(pw_up) );
meas_pulsewidth #( .dir(1'b1), .vlth(0.5), .tstart(0.5/ck_freq) ) mpwdn ( .in(dn), .vdd(vdd), .pw(pw_dn) );
vdiff_sense #( .scale(1.0)) mpwavg ( .vinp(pw_up), .vinn(pw_dn), .cm(pw_avg) );
vdiff_sense #( .scale(`M_TWO_PI*ck_freq) ) mpwdiff ( .vinp(pw_up), .vinn(pw_dn), .diff(phout) );

meas_delay #( .scale(1.0), .in1_dir(1'b1), .in2_dir(1'b1), .vlth1(0.5), .vlth2(0.5) ) mpdelay_up ( .in1(ckref), .in2(up), .vdd(vdd), .delay(pdelay_up)) ;
meas_delay #( .scale(1.0), .in1_dir(1'b1), .in2_dir(1'b1), .vlth1(0.5), .vlth2(0.5) ) mpdelay_dn ( .in1(ckref), .in2(dn), .vdd(vdd), .delay(pdelay_dn)) ;
vdiff_sense #( .scale(1.0)) mpdelayavg ( .vinp(pdelay_up), .vinn(pdelay_dn), .cm(pdelay) );

strobe_ss #(.ts(1.0/ck_freq), .ti(1.0/ck_freq), .tol(0.01), .filename("meas_phout.txt")) xstb_phout (.in(phout), .detect(ss_det1));
strobe_ss #(.ts(1.0/ck_freq), .ti(1.0/ck_freq), .tol(1e-12), .filename("meas_reset_pw.txt")) xstb_pw (.in(pw_avg), .detect(ss_det2));
strobe_ss #(.ts(1.0/ck_freq), .ti(1.0/ck_freq), .tol(1e-12), .filename("meas_pdelay.txt")) xstb_pdelay (.in(pdelay), .detect(ss_det3));
finish_sim #(.no_sig(3)) xfinish (.in({ss_det1,ss_det2,ss_det3}));
amsgnd amsgnd (.gnd(gnd));
    '''

[Test1]
  description = This test checks the relationship from phase input to phase output.

  [[port]]
    [[[phout]]] 
      port_type = analogoutput
      regions = -10.0, 10.0
      abstol = 0.0174 # 1 deg
      description = Differential phase output

[Test2] 
  description = This characterizes the reset pulse width and propagation delay vs power supply variation.

  [[option]]
    max_sample = 10

  [[port]]
    [[[phin]]] 
      port_type = analoginput
      regions = -2.10, 2.10
      pinned = True
      default_value = 0.0 
      description = Differential phase input
    [[[reset_pw]]] 
      port_type = analogoutput
      regions = -10.0, 10.0
      abstol = 5e-12
      description = Reset pulse width
    [[[pdelay]]]   
      port_type = analogoutput
      regions = 0.0, 10.0
      abstol = 5e-12
      description = Average propagation delay
