#################################################################
#
# Copyright (c) 2018- Stanford University. All rights reserved.
# 
# The information and source code contained herein is the 
# property of Stanford University, and may not be disclosed or
# reproduced in whole or in part without explicit written 
# authorization from Stanford University. Contact bclim@stanford.edu for details.
# 
# * Author     : Byong Chan Lim (bclim@stanford.edu)
# * Description: mProbo test configuration file for "comparator" 
#   example
# 
# * Note       :
# 
# * Revision   :
#   - 7/26/2016: First release
# 
#################################################################


#####################################
# test1. A-D checking
# test2. input offset adjustment by cfg_offset
# We separate A-D polarity checking from input offset characterization because it would have very now SNR if they are tested at once.
#####################################


[DEFAULT] 
  [[option]] 
    max_sample = 10

  [[simulation]]
    timeunit = 1ns
    trantime = 10us
    
  [[port]]
    [[[vdd]]] # power supply
      port_type = analoginput
      regions = 0.95, 1.05
      pinned = True
      default_value = 1.0
      description = power supply
    [[[vin_cm]]] 
      port_type = analoginput
      regions = 0.0, 0.3
      pinned = True
      default_value = 0.15
      description = common-mode input
    [[[op_freq]]] 
      port_type = analoginput
      regions = 200e6, 300e6
      pinned = True
      default_value = 250e6
      description = virtual clock frequency for check_a2d module

  [[testbench]] 
    tb_code = '''
comparator dut (.vdd(vdd), .inp(vinp_comp), .inn(vinn_comp), .cfg_offset_p(cfg_offset_p), .cfg_offset_n(cfg_offset_n), .out(comp_out));
vdc #(.dc(@vdd)) xvdd (.vout(vdd));
vdc #(.dc(@vin_diff)) xvin_diff (.vout(vin_diff));
vdc #(.dc(@vin_cm)) xvin_cm (.vout(vin_cm));
vdiff_drive xvdiffdrv (.diff(vin_diff), .cm(vin_cm), .vinp(vinp), .vinn(vinn));
bitvector #(.value(@(cfg_offset_p)), .bit_width(5)) xcfg_offset_p (.out(cfg_offset_p[4:0]));
bitvector #(.value(@(cfg_offset_n)), .bit_width(5)) xcfg_offset_n (.out(cfg_offset_n[4:0]));
clock #(.freq(@(op_freq))) xvirclk(.ckout(virclk));
check_a2d #(.voffset_max(0.45), .invert(0), .vlth(0.5)) vdt_check_a2d (.vdd(vdd), .vinp(vinp), .vinn(vinn), .comp_out(comp_out), .virclk(virclk), .inp_comp(vinp_comp), .inn_comp(vinn_comp), .d2a_out(vout), .d2a_offset(vout_offset));
strobe_ss #(.ts(10e-9), .ti(10e-9), .tol(0.0001), .filename("meas_vout.txt")) xdetect1 (.in(vout), .detect(det_ss1));
strobe_ss #(.ts(10e-9), .ti(10e-9), .tol(0.0001), .filename("meas_vout_offset.txt")) xdetect2 (.in(vout_offset), .detect(det_ss2));
finish_sim #(.no_sig(2)) xfinish (.in({det_ss1,det_ss2}));
amsgnd amsgnd (.gnd(gnd));
    '''

####################################################
# Tests
####################################################

[test1] 
  description = test1 checks if the polarity from inputs to a digital output is correct
  [[port]]
    [[[vin_diff]]] 
      port_type = analoginput
      regions = -0.1, 0.1
      pinned = False
      default_value = 0.0
      description = differential input to the comparator
    [[[cfg_offset_p]]] 
      port_type = quantizedanalog
      bit_width = 5
      encode = binary
      prohibited = 
      pinned = True
      default_value = b00000
      description = offset control + inputs 
    [[[cfg_offset_n]]] 
      port_type = quantizedanalog
      bit_width = 5
      encode = binary
      prohibited = 
      pinned = True
      default_value = b00000
      description = offset control - inputs 
    [[[vout]]] # output from the virtual analog adder of check_a2d
      port_type = analogoutput
      regions = -0.45, 0.45
      abstol = 2e-3
      gaintol = 15 # %
      description = input referred offset

[test2] 
  description = test2 checks input offset control capability
  [[option]] 
    max_sample = 10
    regression_sval_threshold = 1.0

  [[port]]
    [[[vin_diff]]] 
      port_type = analoginput
      regions = -0.05, 0.05
      pinned = True
      default_value = 0.0
      description = differential input to the comparator
    [[[cfg_offset_p]]] 
      port_type = quantizedanalog
      bit_width = 5
      encode = binary
      prohibited = 
      pinned = False
      default_value = b00000
      description = offset control + inputs 
    [[[cfg_offset_n]]] 
      port_type = quantizedanalog
      bit_width = 5
      encode = binary
      prohibited = 
      pinned = False
      default_value = b00000
      description = offset control - inputs 
    [[[vout_offset]]] # output from the virtual analog adder of check_a2d
      port_type = analogoutput
      regions = -0.45, 0.45
      abstol = 0.5e-3
      gaintol = 15 # %
      description = input referred offset
