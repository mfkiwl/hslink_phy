#################################################################
#
# Copyright (c) 2018- Stanford University. All rights reserved.
# 
# The information and source code contained herein is the 
# property of Stanford University, and may not be disclosed or
# reproduced in whole or in part without explicit written 
# authorization from Stanford University. Contact bclim@stanford.edu for details.
# 
# * Author     : Byong Chan Lim (bclim@stanford.edu)
# * Description: mProbo test configuration file for "cteq" example
# 
# * Note       :
# 
# * Revision   :
#   - 7/26/2016: First release
# 
#################################################################


[DEFAULT]
  [[option]]
    max_sample = 20
    #[[[regression_user_model]]]
    #  fp1 = v_fz
  
  [[port]]
    [[[v_icm]]]
      port_type = analoginput
      regions = 1.5, 1.6
      pinned = False
      default_value = 1.6
      description = Common-mode input voltage
    [[[vdm]]]
      port_type = analoginput
      regions = -0.01, 0.01
      pinned = True
      default_value = 0.01
      description = Differential-mode input voltage
    [[[vdd]]]
      port_type = analoginput
      regions = 1.62, 1.98
      pinned = True
      default_value = 1.8
      description = Power supply
    
    [[[v_fz]]]
      port_type = analoginput
      regions = 0.0, 0.4
      pinned = False
      default_value = 0.5
      description = analog input which controls degeneration resistor

[test1]
  description = 'Extract a transfer function, having two poles and a zero, in s-domain from a step response.'
  
  [[simulation]]
    timeunit = 1fs
    trantime = 100us
  
  [[port]]
    
    [[[fp1]]]
      port_type = analogoutput
      regions = 0, 1e20
      abstol = 50e6
      gaintol = 50
      description = First pole frequency in Hz
    
    [[[fp2]]]
      port_type = analogoutput
      regions = 0, 1e20
      abstol = 50e6
      gaintol = 50
      description = Second pole frequency in Hz
    
    [[[fz1]]]
      port_type = analogoutput
      regions = 0, 1e20
      abstol = 5e6
      gaintol = 50
      description = zero frequency in Hz
    
    [[[dcgain]]]
      port_type = analogoutput
      regions = 0, 2
      abstol = 0.1
      gaintol = 50
      description = dc gain
  
  [[testbench]]
    temperature = 50
    tb_code = '''
cteq dut (  .voutp(outp), .vinn(inn), .vss(vss), .vdd(vdd), .vinp(inp), .v_fz(v_fz), .voutn(outn));
vdc #(.dc(@(vdd))) xvdc_vdd (.vout(vdd));
vdc #(.dc(@(v_fz))) xvdc_v_fz (.vout(v_fz));

vpulse #(.v0(@(v_icm-vdm/2.0)), .v1(@(v_icm+vdm/2.0)), .td(1e-07), .tr(1e-12), .tf(1e-12), .tw(1), .tp(2)) xplsp (.vout(inp), .voutb(inn));
vdiff_sense diff_sense_o (.vinp(outp), .vinn(outn), .diff(v_od));
vdiff_sense diff_sense_i (.vinp(inp), .vinn(inn), .diff(v_id));
dump #(.filename("input.txt"),.ts(0), .te(6.0005e-07),.ti(5e-11),.window(1)) dumpi (.in(v_id));
dump #(.filename("output.txt"),.ts(0), .te(6.0005e-07),.ti(5e-11),.window(1)) dumpo (.in(v_od));
detect_ss #(.ts(1.01e-07), .ti(10e-9), .tol(0.001)) xdetect (.in(v_od), .detect(ss_detect));
finish_sim #(.no_sig(1), .delay(2e-9)) xfinish (.in(ss_detect));
amsgnd amsgnd(.gnd(vss));
    '''
    [[[post-processor]]]
      script_files = ${DAVE_SAMPLES}/util/postprocessor/filter_estimator.py
      command = python filter_estimator.py 10e-9 1e+05 2.5e+09 p2z1

#################################################################

[test2]
  description = 'This test extracts the max voltage maximum swing.'
  
  [[simulation]]
    timeunit = 1fs
    trantime = 1us
  
  [[port]]
    [[[max_swing]]]
      port_type = analogoutput
      regions = 0, 1.8
      abstol = 0.01
      gaintol = 50
      description = Max voltage swing
  
  [[testbench]]
    temperature = 50
    tb_code = '''
vdc #(.dc(@(vdd))) xvdc_vdd (.vout(vdd));
vdc #(.dc(@(v_fz))) xvdc_v_fz (.vout(v_fz));

vdc #(.dc(@(v_icm+1.2))) xvdc_inp (.vout(inp));
vdc #(.dc(@(v_icm-1.2))) xvdc_inn (.vout(inn));
cteq dut (  .voutp(outp), .vinn(inn), .vss(vss), .vdd(vdd), .vinp(inp), .v_fz(v_fz), .voutn(outn)  );
vdiff_sense diff_sense_o (.vinp(outp), .vinn(outn), .diff(v_od), .cm(v_oc));
strobe_ss #(.ts(0.0), .ti(1e-9), .tol(0.001), .filename("meas_max_swing.txt")) dumpd (.in(v_od), .detect(ss_detect));
finish_sim #(.no_sig(1), .delay(2e-9)) xfinish (.in(ss_detect));
amsgnd amsgnd(.gnd(vss));
    '''

#################################################################
[test3]
  description = 'This test extracts the common-mode output.'
  
  [[simulation]]
    timeunit = 1fs
    trantime = 1us
  
  [[port]]
    [[[v_oc]]]
      port_type = analogoutput
      regions = 0, 1.8
      abstol = 0.01
      gaintol = 50
      description = common-mode output voltage
  
  [[testbench]]
    temperature = 50
    tb_code = '''
vdc #(.dc(@(vdd))) xvdc_vdd (.vout(vdd));
vdc #(.dc(@(v_fz))) xvdc_v_fz (.vout(v_fz));

vdc #(.dc(@(v_icm))) xvdc_inp (.vout(inp));
vdc #(.dc(@(v_icm))) xvdc_inn (.vout(inn));
cteq dut (  .voutp(outp), .vinn(inn), .vss(vss), .vdd(vdd), .vinp(inp), .v_fz(v_fz), .voutn(outn)  );
vdiff_sense diff_sense_o (.vinp(outp), .vinn(outn), .diff(v_od), .cm(v_oc));
strobe_ss #(.ts(0.0), .ti(1e-9), .tol(0.001), .filename("meas_v_oc.txt")) dumpd (.in(v_oc), .detect(ss_detect));
finish_sim #(.no_sig(1), .delay(2e-9)) xfinish (.in(ss_detect));
amsgnd amsgnd(.gnd(vss));
    '''
