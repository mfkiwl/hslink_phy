#################################################################
#
# Copyright (c) 2018- Stanford University. All rights reserved.
# 
# The information and source code contained herein is the 
# property of Stanford University, and may not be disclosed or
# reproduced in whole or in part without explicit written 
# authorization from Stanford University. Contact bclim@stanford.edu for details.
# 
# * Author     : Byong Chan Lim (bclim@stanford.edu)
# * Description: mProbo test configuration file for 
#   "iintegrator" example 
# 
# * Note       :
# 
# * Revision   :
#   - 7/26/2016: First release
# 
#################################################################


[test1] 

  description = Current integrator for temperature & optical sensors

  [[option]] 
    max_sample = 15             
    regression_sval_threshold = 20

  [[simulation]]   
    timeunit = 100ps 
    trantime = 1.6us
    
  [[port]]  
    [[[vout]]]                
      port_type = analogoutput 
      regions = -10, 10        
      abstol = 1e-3
      gaintol = 10
    [[[avdd]]]                 
      port_type = analoginput  
      regions = 1.75, 1.85     
      pinned = False           
      default_value = 1.8      
    [[[iin]]]                 
      port_type = analoginput  
      regions = 100e-9, 200e-9
      pinned = False           
      default_value = 150e-9
    [[[vout_state]]]                 
      port_type = analoginput  
      regions = 0, 0.3
      pinned = False           
      default_value = 0.0
    [[[ramp_time]]]                 
      port_type = analoginput  
      regions = 100e-9, 500e-9
      pinned = False           
      default_value = 1.25e-6
    [[[rst]]]                 
      port_type = digitalmode 
      bit_width = 1          
      encode = binary
      prohibited =  
      pinned = False 
      default_value = b0 
    [[[pwdnb]]]                
      port_type = digitalmode 
      bit_width = 1          
      encode = binary        
      prohibited =          
      pinned = False        
      default_value = b1   

  [[testbench]] # setup a embedded testbench 
    temperature = 50
    tb_code  = '''
iintegrator dut ( .avdd(avdd), .avss(gnd), .pwdnb(pwdnb), .rst(rst), .rstb(rstb), .iin(iin), .vbn(vbn), .vout(vout), .vref(vref), .vrefi(vrefi));
biasgen xbias ( .avdd(avdd), .avss(gnd), .pwdn(pwdn), .vbn(vbn));
vdc #( .dc(0.0) ) xavss ( .vout(gnd) );
vdc #( .dc(@avdd) ) xavdd ( .vout(avdd) );
//ipulse_n_pwl #( .i0(0), .i1(@iin), .td(1e-9), .tr(10e-12), .tf(10e-12), .tw(@(ramp_time)), .tp(1)) xiin ( .pn(avdd), .nn(iin) );
ipulse #( .is_n(1), .i0(0), .i1(@iin), .td(1e-9), .tr(10e-12), .tf(10e-12), .tw(@(ramp_time)), .tp(1)) xiin ( .refnode(avdd), .outnode(iin) );
bitvector #( .value(@rst), .bit_width(1) ) xrst ( .out(rst), .outb(rstb) );
bitvector #( .value(@pwdnb), .bit_width(1) ) xpwdnb ( .out(pwdnb), .outb(pwdn) );
pulse #(.b0(0), .td(@(ramp_time)), .tw(1), .tp(2)) xstrobe_puls (.out(strobe));
strobe #(.filename("meas_vout.txt")) xmeas_vout (.strobe(strobe), .in(vout));
strobe #(.filename("meas_vref.txt")) xmeas_vref (.strobe(strobe), .in(vref));
strobe #(.filename("meas_vrefi.txt")) xmeas_vrefi (.strobe(strobe), .in(vrefi));
finish_sim xfinish (.in(strobe));
    ''' 
    [[[initial_condition]]] # initial state(s) for both golden and revised module
      [[[[golden]]]]
        dut.vout = @vout_state
      [[[[revised]]]]
        dut.xinteg.so = "'{@vout_state,0,0}"
    [[[wire]]]
      pwl = vbn # since vbn can't be cross-referenced from wire-type cross reference file
