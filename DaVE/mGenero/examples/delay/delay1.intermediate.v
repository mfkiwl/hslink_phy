
/****************************************************************
* This code is automatically generated by "mGenero"
* at Thu, 18 Jan 2018 11:34:51.
*
* Copyright (c) 2014-Present by Stanford University. All rights reserved.
*
* The information and source code contained herein is the property
* of Stanford University, and may not be disclosed or reproduced
* in whole or in part without explicit written authorization from
* Stanford University.
* For more information, contact bclim@stanford.edu
****************************************************************/
/****************************************************************

Copyright (c) #YEAR# #LICENSOR#. All rights reserved.

The information and source code contained herein is the 
property of #LICENSOR#, and may not be disclosed or
reproduced in whole or in part without explicit written 
authorization from #LICENSOR#.

* Filename   : delay.template.sv
* Author     : Byongchan Lim (info@joey-eda-consulting.com)
* Description: SV template for a delay cell

* Note       :

* Todo       :
  - 

* Revision   :
  - 00/00/00 : 

****************************************************************/

module delay1 #(
// parameters here
  
) (
  input pwl a_in , // input signal
  output pwl a_out , // output signal
  input real  ctl // control delay
);

`get_timeunit
PWLMethod pm=new;

// map pins between generic names and user names, if they are different
pwl in ;
pwl out ;
assign in = a_in ;
assign a_out = out ; 
//---SNIPPET ON
///////////////////
// CODE STARTS HERE
///////////////////

//----- wires, assignment
real td;  // the amount of delay
 
//----- body
`protect
//pragma protect 
//pragma protect begin

//-- system's parameter 

// discretization of control inputs

// update parameters as control inputs/mode inputs change

always @(ctl) begin
  t0 = `get_time;
$${
digital_modes = [get_lm_equation_modes('test1', 'delay')]
digital_cases = [digital_modes[0][0].keys()]
variable_map = {}
}$$

$$[if not mode_exists('test1')]
  td = $$get_lm_equation('test1', 'delay');
$$[else]
  case({$$(','.join(digital_cases[0]))})
$$[for m in digital_modes[0]]
  {$$(','.join(["%d'b%s" % (Pin.vectorsize(d), dec2bin('%d'%m[d], Pin.vectorsize(d))) for d in digital_cases[0]]))}: begin
    td = $$get_lm_equation('test1', 'delay', m);
  end
$$[end for]
  default: begin
    td = $$get_lm_equation('test1', 'delay', digital_modes[0][0]);
  end
  endcase
$$[end if]

end

//-- functional behavior
// delay input signal by "td" in second

pwl_delay_prim #( .scale(1.0) ) iDELAY ( .in(in), .out(out), .delay(td) );

//pragma protect end
`endprotect
//---SNIPPET OFF
endmodule
