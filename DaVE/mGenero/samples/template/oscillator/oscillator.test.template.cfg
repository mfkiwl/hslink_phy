#################################################################
#
# Copyright (c) 2016 Stanford University. All rights reserved.
# 
# The information and source code contained herein is the 
# property of Stanford University, and may not be disclosed or
# reproduced in whole or in part without explicit written 
# authorization from Stanford University. Contact bclim@stanford.edu for details.
# 
# * Author     : Byong Chan Lim (bclim@stanford.edu)
# * Description: Test for "oscillator"
# 
# * Note       :
# 
# * Revision   :
#   - 0/00/2017: First release
# 
#################################################################

$${

timeunit = TestParam.value('vlog_timeunit', str)
t_max_sample = int(TestParam.value('test_max_sample'))
t_sval = TestParam.value('test_sensitivity')
est_period = 1.0/float(TestParam.value('est_freq'))
tol_freq = TestParam.value('tol_freq')

t_ramp = 200*est_period
actl_min = TestParam.value('actl_min')
actl_max = TestParam.value('actl_max')

temperature = TestParam.value('temperature')

}$$

[DEFAULT]
  [[option]]
    max_sample = $$t_max_sample
    regression_sval_threshold = $$t_sval

  [[port]]
    [[[vdd]]]                 
      port_type = analoginput
      regions = 0.75, 0.85
      pinned = False        
      default_value = 0.8
      description = power supply voltage
    [[[vss]]]                 
      port_type = analoginput
      regions = 0.0, 0.1
      pinned = True        
      default_value = 0.0
      description = ground
$$[if Pin.is_exist('actl') and (not Template.is_calibration())]
    [[[actl]]]                 
      port_type = analoginput
      regions = 0.0, 0.8
      pinned = False        
      default_value = 0.4
      description = analog control voltage for tuning oscillator frequency
$$[end if]

$$TestPort.declare_optional_pins(exclude=Pin.list_pinonly()+['actl'])

$$[if not Pin.is_exist('actl') or (not Template.is_calibration())]
[test1] 
  description = Extract oscillator frequency

  [[simulation]]
    timeunit = $$timeunit
    trantime  = $$to_engr(1e-9+100*est_period)s
    
  [[port]]
    [[[freqout]]] 
      port_type = analogoutput
      regions = 1e6, 10e9 
      abstol  = $$tol_freq
      gaintol = 50
      description = output frequency of outp clock output
$$[if Pin.is_exist('outn')]
    [[[freqout_n]]] 
      port_type = analogoutput
      regions = 1e6, 10e9 
      abstol  = $$tol_freq
      gaintol = 50
      description = output frequency of outn clock output
$$[end if]

  [[testbench]]
    tb_code  = '''
$$Testbench.dut() dut ( $$Testbench.dut_map_by_name() );

$$Testbench.instantiate_vdc('vdd')
$$Testbench.instantiate_vdc('vss')

$$[if Pin.is_exist('actl')]
$$[if Pin.is_current('actl')]
$$Testbench.instantiate_idc_on_pin('actl', 'vdd', 'vss')
$$[else]
$$Testbench.instantiate_vdc('actl')
$$[end if]
$$[end if]

$$Testbench.instantiate_vdc_optional_pins(exclude=Pin.list_pinonly()+['actl'])
$$Testbench.instantiate_idc_optional_pins('vdd', 'vss', exclude=Pin.list_pinonly()+['actl'])
$$Testbench.instantiate_bitvector_optional_pins(exclude=Pin.list_pinonly())

meas_clock #( .dir(1'b1), .vlth(0.5), .tstart(1e-9) ) umeas_outp ( .clk(outp), .vdd(vdd), .frequency(freqout) );
strobe_ss #(.ts(2e-9), .ti($$(est_period*5)), .tol($$(tol_freq)), .filename("meas_freqout.txt")) umeas_freqout (.in(freqout), .detect(ss_det1));
$$[if Pin.is_exist('outn')]
meas_clock #( .dir(1'b1), .vlth(0.5), .tstart(1e-9) ) umeas_outn ( .clk(outn), .vdd(vdd), .frequency(freqout_n) );
strobe_ss #(.ts(2e-9), .ti($$(est_period*5)), .tol($$(tol_freq)), .filename("meas_freqout_n.txt")) umeas_freqout_n (.in(freqout_n), .detect(ss_det2));
$$[end if]
$$[if Pin.is_exist('outn')]
finish_sim #(.no_sig(2)) xfinish (.in({ss_det1,ss_det2}));
$$[else]
finish_sim #(.no_sig(1)) xfinish (.in(ss_det1));
$$[end if]
amsgnd amsgnd (.gnd(gnd));
    '''
$$[end if]




$$[if Pin.is_exist('actl') and (Template.is_calibration())]

[test2] 
  description = Calibrate VCO(CCO) characteristics 


  [[simulation]]
    timeunit = $$timeunit
    trantime  = $$to_engr(t_ramp*1.2)s
    
  [[port]]
    [[[kvco]]]             
      port_type = analogoutput
      regions = 0.0, 2.0     
      abstol = 0.05
      gaintol = 50
      description = kvco
    [[[actl_max]]]             
      port_type = analogoutput
      regions = -1.0, 1.0
      abstol = 10e-3
      gaintol = 50
      description = min control of actl for linear op.
    [[[actl_min]]]             
      port_type = analogoutput
      regions = -1.0, 1.0
      abstol = 10e-3
      gaintol = 50
      description = max control of actl for linear op.
    [[[actl_ctr]]]             
      port_type = analogoutput
      regions = -1.0, 1.0
      abstol = 10e-3
      gaintol = 50
      description = center control of actl for linear op.
    [[[freqout_max]]]             
      port_type = analogoutput
      regions = -1.0, 1.0
      abstol = 10e-3
      gaintol = 50
      description = max freq. in linear region
    [[[freqout_min]]]             
      port_type = analogoutput
      regions = -1.0, 1.0
      abstol = 10e-3
      gaintol = 50
      description = min freq. in linear region
    [[[freqout_ctr]]]             
      port_type = analogoutput
      regions = -1.0, 1.0
      abstol = 10e-3
      gaintol = 50
      description = freq. at actl is vi_ctr

  [[testbench]]
    tb_code  = '''
$$Testbench.dut() dut ( $$Testbench.dut_map_by_name() );

$$Testbench.instantiate_vdc('vdd')
$$Testbench.instantiate_vdc('vss')

$$[if Pin.is_current('actl')]
$$[if Pin.current_direction('actl')=='n']
ipulse #(.is_n(0), .i0($$actl_min), .i1($$actl_max), .td(1e-9), .tr($$t_ramp), .tf($$t_ramp), .tw(1.0), .tp(1.0)) uACTL (.outnode(actl), .refnode(vss));
ipulse #(.is_n(0), .i0($$actl_min), .i1($$actl_max), .td(1e-9), .tr($$t_ramp), .tf($$t_ramp), .tw(1.0), .tp(1.0)) uIACTL (.outnode(i_actl), .refnode(vss));
$$[else]
ipulse #(.is_n(1), .i0($$actl_min), .i1($$actl_max), .td(1e-9), .tr($$t_ramp), .tf($$t_ramp), .tw(1.0), .tp(1.0)) uACTL (.outnode(actl), .refnode(vdd));
ipulse #(.is_n(1), .i0($$actl_min), .i1($$actl_max), .td(1e-9), .tr($$t_ramp), .tf($$t_ramp), .tw(1.0), .tp(1.0)) uIACTL (.outnode(i_actl), .refnode(vdd));
$$[end if]
$$[else]
vpulse #(.v0($$actl_min), .v1($$actl_max), .td(1e-9), .tr($$t_ramp), .tf($$t_ramp), .tw(1.0), .tp(1.0)) uACTL (.vout(actl));
$$[end if]

$$Testbench.instantiate_vdc_optional_pins(exclude=Pin.list_pinonly()+['actl'])
$$Testbench.instantiate_idc_optional_pins('vdd', 'vss', exclude=Pin.list_pinonly()+['actl'])
$$Testbench.instantiate_bitvector_optional_pins(exclude=Pin.list_pinonly())

meas_clock #( .dir(1'b1), .vlth(0.5), .tstart(1e-9) ) umeas_outp ( .clk(outp), .vdd(vdd), .frequency(freqout) );
$$[if Pin.is_exist('outn')]
meas_clock #( .dir(1'b1), .vlth(0.5), .tstart(1e-9) ) umeas_outn ( .clk(outn), .vdd(vdd), .frequency(freqout_n) );
$$[end if]

$$[if Pin.is_current('actl')]
$$[if Pin.current_direction('actl')=='n']
idump #(.is_n(1), .vdrop(0.0), .window(1), .ts(2e-9), .ti(100.0*$$est_period), .te(1.0), .filename("dctxf_in.txt")) uDUMP_ACTL (.outnode(i_actl), .refnode(vdd));
$$[else]
idump #(.is_n(0), .vdrop(0.0), .window(1), .ts(2e-9), .ti(2.0*$$est_period), .te(1.0), .filename("dctxf_in.txt")) uDUMP_ACTL (.outnode(i_actl), .refnode(vss));
$$[end if]
$$[else]
dump #(.window(1), .ts(2e-9), .ti(2.0*$$est_period), .te(1.0), .filename("dctxf_in.txt")) uDUMP_ACTL (.in(actl));
$$[end if]
dump #(.window(1), .ts(2e-9), .ti(2.0*$$est_period), .te(1.0), .filename("dctxf_out.txt")) uDUMP_FREQ (.in(freqout));

amsgnd amsgnd (.gnd(gnd));
    '''
    [[[post-processor]]]
      script_files = ${DAVE_SAMPLES}/util/postprocessor/dc_txf.py
      command = python dc_txf.py --gain kvco --imax actl_max --imin actl_min --ictr actl_ctr --omax freqout_max --omin freqout_min --octr freqout_ctr
$$[end if]
