####################################################
# Test configuration file for "$$(Test.dut())"
####################################################

[DEFAULT] 

  dut = $$(Test.dut())

  [[regression]]
    min_sample = 20
    no_of_analog_grid = 5
    order = 1
    en_interact = True
    input_sensitivity_threshold = 10.0 

  [[simulation]]
    timeunit = 1fs
    timeprec = 1fs
    #time = $$(str(to_engr(9.0/TestParam.value('frequency')))+'s') # 9-cycles of reference clock
    time = 10us
    
  [[port]]
    [[[phin]]] 
      port_type = analoginput
      regions = -2.10, 2.10
      pinned = False
      default_value = 0.0 
      description = Differential phase input
    [[[supply]]] 
      port_type = analoginput
      regions = 0.95, 1.05
      pinned = False
      default_value = 1.0
      description = Power supply
$$#[if Pin.is_exist('reset')]
#    [[[reset]]]
#      port_type = digitalmode
#      bit_width = 1
#      encode = binary
#      prohibited = 
#      pinned = False
#      default_value = b1
#      description = External reset
$$#[end if]

$$TestPort.declare_optional_pins(exclude=['vss'])

  [[testbench]]
    custom_code  = '''
parameter real ck_freq = $$(TestParam.value('frequency'));

$$Testbench.instantiate_vdc('vdd', '$$supply')
$$Testbench.instantiate_bitvector_optional_pins()

$$Testbench.dut() dut ( $$Testbench.dut_map_by_name() );

$$[if Pin.is_exist('reset')]
// use pulse instead of bitvector to initialize up/dn states
pulse #( .b0(@(1-reset)), .td(0.5/ck_freq*0.2), .tw(1) , .tp(2) ) xrst ( .out(reset) );
$$[end if]

phase2ck_diff #( .ph_diff(@phin), .ph_cm(`M_TWO_PI), .freq(ck_freq), .duty(0.5) ) xphin ( .cko_lead(ckref), .cko_lag(ckfb) );
meas_pulsewidth #( .dir(1'b1), .vlth(0.5), .tstart(0.5/ck_freq) ) mpwup ( .in(up), .vdd(vdd), .pw(pw_up) );
meas_pulsewidth #( .dir(1'b1), .vlth(0.5), .tstart(0.5/ck_freq) ) mpwdn ( .in(dn), .vdd(vdd), .pw(pw_dn) );
vdiff_sense #( .scale(`M_TWO_PI*ck_freq) ) mpwdiff_deg ( .vinp(pw_up), .vinn(pw_dn), .diff(phout) );
vdiff_sense #( .scale(1.0) ) mpwdiff_sec ( .vinp(pw_up), .vinn(pw_dn), .diff(tos) );
strobe_ss #(.ts(1.0/ck_freq), .ti(1.0/ck_freq), .tol(0.01), .filename("meas_phout.txt")) xstb_phout (.in(phout), .detect(ss_det1));
strobe_ss #(.ts(1.0/ck_freq), .ti(1.0/ck_freq), .tol(1e-13), .filename("meas_tos.txt")) xstb_tos (.in(tos), .detect(ss_det2));

$$[if Metric.is_exist('rstpw')]
vdiff_sense #( .scale(1.0)) mrstpw ( .vinp(pw_up), .vinn(pw_dn), .cm(rstpw) );
strobe_ss #(.ts(1.0/ck_freq), .ti(1.0/ck_freq), .tol(1e-13), .filename("meas_rstpw.txt")) xstb_rstpw (.in(rstpw), .detect(ss_det3));
$$[else]
assign ss_det3=1'b1;
$$[end if]

$$[if Metric.is_exist('tpd')]
  meas_delay #( .scale(1.0), .in1_dir(1'b1), .in2_dir(1'b1), .vlth1(0.5), .vlth2(0.5) ) mtpd_up ( .in1(ckref), .in2(up), .vdd(vdd), .delay(tpd_up)) ;
  meas_delay #( .scale(1.0), .in1_dir(1'b1), .in2_dir(1'b1), .vlth1(0.5), .vlth2(0.5) ) mtpd_dn ( .in1(ckref), .in2(dn), .vdd(vdd), .delay(tpd_dn)) ;
  vdiff_sense #( .scale(1.0)) mtpdavg ( .vinp(tpd_up), .vinn(tpd_dn), .cm(tpd) );
  strobe_ss #(.ts(1.0/ck_freq), .ti(1.0/ck_freq), .tol(1e-13), .filename("meas_tpd.txt")) xstb_tpd (.in(tpd), .detect(ss_det4));
$$[else]
assign ss_det4=1'b1;
$$[end if]
finish_sim #(.no_sig(4)) xfinish (.in({ss_det1,ss_det2,ss_det3,ss_det4}));
    '''
    [[[wire]]]
      pwl = vdd, vss, pw_up, pw_dn, rstpw, phout, tos, tpd_up, tpd_dn, tpd
      logic = ss_det1, ss_det2, ss_det3, ss_det4, reset, ckref, ckfb, $$TestWire.declare_logic(Pin.list_optional_digital())
      ams_ground = vss

[test1]
  description = '''
This test checks the relationship from phase input to phase output.
'''
  [[port]]
    [[[phout]]] 
      port_type = analogoutput
      regions = -10.0, 10.0
      abstol = 0.0174 # 1 deg
      gaintol = 15
      description = Differential phase output
    [[[supply]]] 
      port_type = analoginput
      regions = 0.95, 1.05
      pinned = True
      default_value = 1.0
      description = Power supply

$$[if any(map(Metric.is_exist, ['tpd', 'rstpw', 'tos']))]
[test2] 
  description = '''
This test characterizes the reset pulse width and propagation delay vs power supply variation.
'''
  [[regression]]
    no_of_analog_grid = 9
  [[port]]
    [[[phin]]] 
      port_type = analoginput
      regions = -2.10, 2.10
      pinned = True
      default_value = 0.0 
      description = Differential phase input
$$[if Metric.is_exist('rstpw')]
    [[[rstpw]]] 
      port_type = analogoutput
      regions = -10.0, 10.0
      abstol = 5e-12
      gaintol = 15
      description = Reset pulse width
$$[end if]
$$[if Metric.is_exist('tpd')]
    [[[tpd]]]   
      port_type = analogoutput
      regions = 0.0, 10.0
      abstol = 5e-12
      gaintol = 15
      description = Average propagation delay
$$[end if]
$$[if Metric.is_exist('tos')]
    [[[tos]]]   
      port_type = analogoutput
      regions = 0.0, 10.0
      abstol = 1e-12
      gaintol = 15
      description = Phase offset
$$[end if]
$$[end if]
