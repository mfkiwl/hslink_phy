#################################################################
#
# Copyright (c) 2016 Stanford University. All rights reserved.
# 
# The information and source code contained herein is the 
# property of Stanford University, and may not be disclosed or
# reproduced in whole or in part without explicit written 
# authorization from Stanford University. Contact bclim@stanford.edu for details.
# 
# * Author     : Byong Chan Lim (bclim@stanford.edu)
# * Description: Test for "$$(Test.dut())"
#
# * Note       :

# * Revision   :
#   - 10/26/2016: First release
# 
#################################################################

$${
timeunit = '10ps'
trantime = '10ns'
t1_max_sample = int(TestParam.value('test1_max_sample'))
t1_sval = TestParam.value('test1_sensitivity')

#t_tau = TestParam.value('test_tau')
#t1_t_ramp = 1e5*t_tau
#t2_f_bin = TestParam.value('test2_f_bin')
#t2_f_max = TestParam.value('test2_f_max')
#t2_cmin = TestParam.value('test2_cmin')
#t2_cmax = TestParam.value('test2_cmax')
temperature = TestParam.value('temperature')

}$$

[DEFAULT]
  [[port]]
    [[[vdd]]]                 
      port_type = analoginput
      regions = 0.76, 0.84
      pinned = False        
      default_value = 0.8
      description = power supply voltage
    [[[vss]]]                 
      port_type = analoginput
      regions = 0.0, 0.1
      pinned = True        
      default_value = 0.0
      description = ground
    [[[temperature]]]                 
      port_type = analoginput
      regions = 0, 100
$$[if Metric.is_exist('temperature')]
      pinned = False        
$$[else]
      pinned = True        
$$[end if]
      default_value = $$temperature
      description = Temperature in celsius degree

$$TestPort.declare_optional_pins(exclude=Pin.list_pinonly())

###########################

[test1] 
  description = ''' Test output DC bias voltage/current'''

  [[option]] 
    max_sample = $$t1_max_sample
    regression_sval_threshold = $$t1_sval

  [[simulation]] 
    timeunit = $$timeunit
    trantime  = $$trantime
    
  [[port]]  # port specification

$$[if Pin.is_exist('iout_p')]
$$[if Pin.vectorsize('iout_p') > 1]
$$[for i in range(Pin.vectorsize('iout_p'))]
    [[[iout_p_$$(i)_]]]             
      port_type = analogoutput
      regions = 0.0, 2.0     
      abstol = Param.value('etol_i')
      gaintol = 50
      description = output current (sink type)
$$[end for]
$$[else]
    [[[iout_p]]]             
      port_type = analogoutput
      regions = 0.0, 2.0     
      abstol = Param.value('etol_i')
      gaintol = 50
      description = output current (sink type)
$$[end if]
$$[end if]

$$[if Pin.is_exist('iout_n')]
$$[if Pin.vectorsize('iout_n') > 1]
$$[for i in range(Pin.vectorsize('iout_n'))]
    [[[iout_n_$$(i)_]]]             
      port_type = analogoutput
      regions = 0.0, 2.0     
      abstol = 1e-6
      gaintol = 50
      description = output current (source type)
$$[end for]
$$[else]
    [[[iout_n]]]             
      port_type = analogoutput
      regions = 0.0, 2.0     
      abstol = 1e-6
      gaintol = 50
      description = output current (source type)
$$[end if]
$$[end if]

$$[if Pin.is_exist('vout')]
$$[if Pin.vectorsize('vout') > 1]
$$[for i in range(Pin.vectorsize('vout'))]
    [[[vout_$$(i)_]]]             
      port_type = analogoutput
      regions = 0.0, 2.0     
      abstol = $$Param.value('etol_v')
      gaintol = 50
      description = output current
$$[end for]
$$[else]
    [[[vout]]]             
      port_type = analogoutput
      regions = 0.0, 2.0     
      abstol = $$Param.value('etol_v')
      gaintol = 50
      description = output current
$$[end if]
$$[end if]

  [[testbench]]
    temperature = @temperature
    tb_code  = '''
$$[if Pin.is_exist('vout') and Pin.vectorsize('vout') > 1]
`pwl_array(vout,$$Pin.vectorsize('vout'))
$$[end if]
$$[if Pin.is_exist('iout_p') and Pin.vectorsize('iout_p') > 1]
`pwl_array(iout_p,$$Pin.vectorsize('iout_p'))
$$[end if]
$$[if Pin.is_exist('iout_n') and Pin.vectorsize('iout_n') > 1]
`pwl_array(iout_n,$$Pin.vectorsize('iout_n'))
$$[end if]

$$Testbench.dut() dut ( $$Testbench.dut_map_by_name() );

$$Testbench.instantiate_vdc('vdd')
$$Testbench.instantiate_vdc('vss')
$$Testbench.instantiate_vdc_optional_pins(exclude=Pin.list_pinonly())
$$Testbench.instantiate_idc_optional_pins('vdd', 'vss', exclude=Pin.list_pinonly())
$$Testbench.instantiate_bitvector_optional_pins(exclude=Pin.list_pinonly())

$$[if Pin.is_exist('vout') and Pin.vectorsize('vout') > 1]
`ifdef AMS
analog begin
$$[for i in range(Pin.vectorsize('vout'))]V(vout_$$(i)_) <+ V(vout[$$(i)]);
$$[end for]
end
`else
$$[for i in range(Pin.vectorsize('vout'))]assign vout_$$(i)_ = vout[$$(i)];
$$[end for]
`endif
$$[end if]

$$[if Pin.is_exist('iout_p') and Pin.vectorsize('iout_p') > 1]
`ifdef AMS
analog begin
$$[for i in range(Pin.vectorsize('iout_p'))]V(iout_p_$$(i)_,iout_p[$$(i)]) <+ 1e-15*I(iout_p_$$(i)_,iout_p[$$(i)]);
$$[end for]
end
`else
$$[for i in range(Pin.vectorsize('iout_p'))]assign iout_p_$$(i)_ = iout_p[$$(i)];
$$[end for]
`endif
$$[end if]

$$[if Pin.is_exist('iout_n') and Pin.vectorsize('iout_n') > 1]
`ifdef AMS
analog begin
$$[for i in range(Pin.vectorsize('iout_n'))]V(iout_n_$$(i)_,iout_n[$$(i)]) <+ 1e-15*I(iout_n_$$(i)_,iout_n[$$(i)]);
$$[end for]
end
`else
$$[for i in range(Pin.vectorsize('iout_n'))]assign iout_n_$$(i)_ = iout_n[$$(i)];
$$[end for]
`endif
$$[end if]

$$[if Pin.is_exist('iout_p')]
$$[if Pin.vectorsize('iout_p') > 1]
$$[for i in range(Pin.vectorsize('iout_p'))]
idump #( .is_n(1), .vdrop(@(vdd*0.2)), .ts(9e-9), .window(1'b0), .filename("meas_iout_p_$$(i)_.txt") ) uDUMP_IOUT_P_$$(i)_ ( .refnode(vdd), .outnode(iout_p_$$(i)_) );
$$[end for]
$$[else]
idump #( .is_n(1), .vdrop(@(vdd*0.2)), .ts(9e-9), .window(1'b0), .filename("meas_iout_p.txt") ) uDUMP_IOUT_P ( .refnode(vdd), .outnode(iout_p) );
$$[end if]
$$[end if]

$$[if Pin.is_exist('iout_n')]
$$[if Pin.vectorsize('iout_n') > 1]
$$[for i in range(Pin.vectorsize('iout_n'))]
idump #( .is_n(0), .vdrop(@(vdd*0.2)), .ts(9e-9), .window(1'b0), .filename("meas_iout_n_$$(i)_.txt") ) uDUMP_IOUT_N_$$(i)_ ( .refnode(vss), .outnode(iout_n_$$(i)_) );
$$[end for]
$$[else]
idump #( .is_n(0), .vdrop(@(vdd*0.2)), .ts(9e-9), .window(1'b0), .filename("meas_iout_n.txt") ) uDUMP_IOUT_N ( .refnode(vss), .outnode(iout_n) );
$$[end if]
$$[end if]

$$[if Pin.is_exist('vout')]
$$[if Pin.vectorsize('vout') > 1]
$$[for i in range(Pin.vectorsize('vout'))]
dump #(.window(0), .ts(9e-9), .filename("meas_vout_$$(i)_.txt")) uDUMP_VOUT_$$(i)_ (.in(vout_$$(i)_));
$$[end for]
$$[else]
dump #(.window(0), .ts(9e-9), .filename("meas_vout.txt")) uDUMP_VOUT (.in(vout));
$$[end if]
$$[end if]

amsgnd amsgnd(.gnd(gnd)); // define AMS ground
    '''
  [[[initial_condition]]]
    [[[[revised]]]]
      dut.temperature = @temperature


###########################
