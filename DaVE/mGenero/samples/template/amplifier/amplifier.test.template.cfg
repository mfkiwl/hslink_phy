#################################################################
#
# Copyright (c) 2016 Stanford University. All rights reserved.
# 
# The information and source code contained herein is the 
# property of Stanford University, and may not be disclosed or
# reproduced in whole or in part without explicit written 
# authorization from Stanford University. Contact bclim@stanford.edu for details.
# 
# * Author     : Byong Chan Lim (bclim@stanford.edu)
# * Description: Test for "$$(Test.dut())"
#
# * Note       :

# * Revision   :
#   - 10/26/2016: First release
# 
#################################################################

[DEFAULT]
  dut = $$(Test.dut())
$${
step_time = 10e-9
f_bin = TestParam.value('f_bin')
f_max = TestParam.value('f_max')
dt    = 1.0/4.0/f_max
#te = (1.0+2.0*f_max/f_bin)*dt + step_time
te = 100e-6
te_sim = (1.0+2.0*f_max/f_bin)*dt + step_time + 1e-9
}$$

  [[option]]
    max_sample = 20
    regression_order = 1
    regression_en_interact = True
    regression_sval_threshold = 5.0

  [[port]]
    [[[v_icm]]] 
      port_type = analoginput
      regions = 1.4, 1.8
      pinned = False
      default_value = 1.6
      description = Common-mode input voltage
    [[[vdm]]] 
      port_type = analoginput
      regions = -0.01, 0.01
      pinned = True
      default_value = 0.01 
      description = Differential-mode input voltage
    [[[vdd]]] 
      port_type = analoginput
      regions = 1.62, 1.98
      pinned = True
      default_value = 1.8
      description = Power supply

$$TestPort.declare_optional_pins(exclude=['vss'])

[test1] 
  description = '''
Extract a transfer function, having two poles and a zero, in s-domain from a step response.
'''

  [[simulation]]
    timeunit = 1ps
    trantime = $$to_engr(te)s
    
  [[port]]
$$[if Metric.is_exist('filter')]
    [[[fp1]]] 
      port_type = analogoutput
      regions = 0, 1e20
      abstol = 50e6 
      gaintol = 50
      description = First pole frequency in Hz
$$[end if]
$$[if Metric.value('filter') in ['p2z1', 'p2']]
    [[[fp2]]] 
      port_type = analogoutput
      regions = 0, 1e20
      abstol = 50e6 
      gaintol = 50
      description = Second pole frequency in Hz
$$[end if]
$$[if Metric.value('filter') in ['p2z1']]
    [[[fz1]]] 
      port_type = analogoutput
      regions = 0, 1e20
      abstol = 5e6 
      gaintol = 50
      description = zero frequency in Hz
$$[end if]
    [[[dcgain]]] 
      port_type = analogoutput
      regions = 0, 2
      abstol = 0.1 
      gaintol = 50
      description = dc gain

  [[testbench]]
    temperature = 50
    tb_code  = '''

$$Testbench.instantiate_vdc('vdd')
$$Testbench.instantiate_vdc_optional_pins(exclude=['vss'])
$$Testbench.instantiate_idc_optional_pins('vdd', 'vss')
$$Testbench.instantiate_bitvector_optional_pins()

vpulse #(.v0(@(v_icm-vdm/2.0)), .v1(@(v_icm+vdm/2.0)), .td($$(step_time)), .tr(1e-12), .tf(1e-12), .tw(1), .tp(2)) xplsp (.vout(inp), .voutb(inn));
$$Testbench.dut() dut ( $$Testbench.dut_map_by_name() );
$$[if Pin.is_exist('outn')]
vdiff_sense diff_sense_o (.vinp(outp), .vinn(outn), .diff(v_od));
$$[else]
pwl_feedthrough xunity (.in(outp), .out(v_od));
$$[end if]
vdiff_sense diff_sense_i (.vinp(inp), .vinn(inn), .diff(v_id));
dump #(.filename("input.txt"),.ts($$(step_time/2.0)), .te($$te),.ti($$dt),.window(1)) dumpi (.in(v_id));
dump #(.filename("output.txt"),.ts($$(step_time/2.0)), .te($$te),.ti($$dt),.window(1)) dumpo (.in(v_od));
detect_ss #(.ts($$(step_time+1e-9)), .ti(10e-9), .tol($$Param.value('etol_f'))) xdetect (.in(v_od), .detect(ss_detect));
finish_sim #(.no_sig(1), .delay($$(step_time))) xfinish (.in(ss_detect));
amsgnd amsgnd(.gnd(vss));
    '''
    #[[[wire]]]
    #  pwl = vdd, vss, ibias, inp, inn, outp, outn, v_id, v_od, $$TestWire.declare_analog(Pin.list_optional_analog(), 'pwl')
    #  ams_ground = vss
    #  logic = ss_detect, $$TestWire.declare_logic(Pin.list_optional_digital())
    [[[post-processor]]]
      script_files = ${DAVE_SAMPLES}/util/postprocessor/filter_estimator.py
      command = python filter_estimator.py $$(step_time/2.0) $$('%g' % f_bin) $$('%g' % f_max) $$(Metric.value('filter'))

#################################################################
$$[if Metric.is_exist('compression')]
[test2] 
  description = '''
This test extracts the max voltage maximum swing.
'''

  [[simulation]]
    timeunit = 1ps
    trantime = $$to_engr(te)s
    
  [[port]]
    [[[max_swing]]] 
      port_type = analogoutput
      regions = 0, 1.8
      abstol = 0.015
      gaintol = 50
      description = Max voltage swing
    [[[vdm]]] 
      port_type = analoginput
      regions = -1.20, 1.20
      pinned = True
      default_value = 1.20 
      description = Differential-mode input voltage

  [[testbench]]
    temperature = 50
    tb_code  = '''

$$Testbench.instantiate_vdc('vdd')
$$Testbench.instantiate_vdc('v_icm')
$$Testbench.instantiate_vdc_optional_pins(exclude=['vss'])
$$Testbench.instantiate_idc_optional_pins('vdd', 'vss')
$$Testbench.instantiate_bitvector_optional_pins()

vpulse #(.v0(0.0), .v1(@(vdm/2.0)), .td($$(step_time)), .tr(1e-12), .tf(1e-12), .tw(1), .tp(2)) xplsp (.vout(diff_in));
vdiff_drive uddrive (.diff(diff_in), .cm(v_icm), .vinp(inp), .vinn(inn)); 
$$#Testbench.instantiate_vdc('inp', '$$(v_icm+1.2)')
$$#Testbench.instantiate_vdc('inn', '$$(v_icm-1.2)')
$$Testbench.dut() dut ( $$Testbench.dut_map_by_name() );
$$[if Pin.is_exist('outn')]
vdiff_sense diff_sense_o (.vinp(outp), .vinn(outn), .diff(v_od), .cm(v_oc));
$$[else]
pwl_feedthrough xunity (.in(outp), .out(v_od));
$$[end if]
pulse #(.b0(0), .td(1e-9), .tw(1), .tp(2)) xpulsestrb (.out(strb));
strobe ustb (.strobe(strb), .in(v_od), .out(v_od_ref));
vdiff_sense udiffout (.vinp(v_od), .vinn(v_od_ref), .diff(v_od_strb));
strobe_ss #(.ts(0.0), .ti($$(step_time)), .tol($$Param.value('etol_f')), .filename("meas_max_swing.txt")) dumpd (.in(v_od_strb), .detect(ss_detect));
finish_sim #(.no_sig(1), .delay(2e-9)) xfinish (.in(ss_detect));
amsgnd amsgnd(.gnd(vss));
    '''
    #[[[wire]]]
    #  pwl = vdd, vss, ibias, inp, inn, outp, outn, v_id, v_icm, diff_in, v_od, v_oc, v_od_ref, v_od_strb, $$TestWire.declare_analog(Pin.list_optional_analog(), 'pwl')
    #  ams_ground = vss
    #  logic = strb, ss_detect, $$TestWire.declare_logic(Pin.list_optional_digital())
$$[end if]
#################################################################
[test3] 
  description = '''
This test extracts the common-mode output.
'''

  [[simulation]]
    timeunit = 1ps
    trantime = $$to_engr(te)s
    
  [[port]]
    [[[v_oc]]] 
      port_type = analogoutput
      regions = 0, 1.8
      abstol = 0.01
      gaintol = 50
      description = common-mode output voltage

  [[testbench]]
    temperature = 50
    tb_code  = '''

$$Testbench.instantiate_vdc('vdd')
$$Testbench.instantiate_vdc_optional_pins(exclude=['vss'])
$$Testbench.instantiate_idc_optional_pins('vdd', 'vss')
$$Testbench.instantiate_bitvector_optional_pins()

$$Testbench.instantiate_vdc('inp', '$$(v_icm)')
$$Testbench.instantiate_vdc('inn', '$$(v_icm)')
$$Testbench.dut() dut ( $$Testbench.dut_map_by_name() );

$$[if Pin.is_exist('outn')]
vdiff_sense diff_sense_o (.vinp(outp), .vinn(outn), .diff(v_od), .cm(v_oc));
$$[else]
pwl_feedthrough xunity (.in(outp), .out(v_oc));
$$[end if]
strobe_ss #(.ts(0.0), .ti(1e-9), .tol($$Param.value('etol_f')), .filename("meas_v_oc.txt")) dumpc (.in(v_oc), .detect(ss_detect));
finish_sim #(.no_sig(1), .delay(2e-9)) xfinish (.in(ss_detect));
amsgnd amsgnd(.gnd(vss));
    '''
    #[[[wire]]]
    #  pwl = vdd, vss, ibias, inp, inn, outp, outn, v_id, v_od, v_oc, $$TestWire.declare_analog(Pin.list_optional_analog(), 'pwl')
    #  ams_ground = vss
    #  logic = ss_detect, $$TestWire.declare_logic(Pin.list_optional_digital())
#################################################################
