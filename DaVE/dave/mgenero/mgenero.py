
__doc__ = '''
Top Module of mGenero
'''

import os
import sys
import logging
#import yaml
#import shutil
#import copy
#from dave.mgenero.interface import Interface
from dave.mgenero.templateinterpreter import TemplateInterpreter
from dave.mgenero.flowcontrol import run_characterization, run_equivalence
from dave.mgenero.userconfig import UserConfiguration
from dave.common.misc import printToday
from dave.common.davelogger import DaVELogger
import dave.common.davemsg as davemsg
from dave.mprobo.testconfig import TestConfig
#from collections import OrderedDict

logging.basicConfig(filename='.mGenero_modelgen_debug.log',
                    filemode='w',
                    level=logging.DEBUG)
logger = logging.getLogger('')
ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.INFO)
logger.addHandler(ch)
ch1 = logging.StreamHandler(open('mGenero.log', 'w'))
ch1.setLevel(logging.INFO)
logger.addHandler(ch1)

__doc__ = """
"""

#-------------------------------------------------------------
class ModelCreator(object):
  ''' Front-End for running mGenero '''
  msg1 = '[INFO] User test configuration %s overrides the generated test configuration from a template'
  msg2 = '[INFO] The original, generated test configuration from a template is saved to %s.'
  def __init__(self, cfg_filename, ifc_filename, api_file = None, template_rootdir=''):
    '''
      cfg_filename : User configuration file that customizes its master cell interface
      ifc_filename : Interface file name of a master cell
      api_file     : Python file that contains API functions of a template
      template_rootdir: Reserved 
    '''
    self._logger = DaVELogger.get_logger('%s.%s' % (__name__, self.__class__.__name__))
    self._display_logo()
    self.mc = UserConfiguration(cfg_filename, ifc_filename, template_rootdir, self._logger)
    self.ip = TemplateInterpreter(api_file, self._logger)

  def generate_model(self, template_filename, dst_filename):
    ''' Generate an intermediate form of a model '''
    self.ip.generate_model(template_filename, dst_filename, self.mc.get_config())

  def generate_test(self, template_filename, dst_filename, usertest_filename='', calibration=False):
    ''' Generate a mProbo test configuration.
        - template_filename : Test template of a master cell
        - dst_filename : Test file name being generated
        - usertest_filename : if user test configuration (usertest_filename) is provided, 
                              that will override the generated test configuration from a template. 
                              This is necessary to define specifications of port in tests.
        - calibration: 
          - True if circuit property extraction is performed.
          - False if model/circuit equivalence checking is performed.
    '''
    self.ip.generate_test(template_filename, dst_filename, self.mc.get_config(), calibration=calibration)
    if os.path.exists(usertest_filename):
      self._logger.info(self.msg1 % usertest_filename)
      self._logger.info(self.msg2 % (dst_filename+'.bak'))
      self.__override_testcfg(dst_filename, usertest_filename)
      

  def run_characterization(self, test_cfg='test.cfg', sim_cfg='sim.cfg', report='report_char.html', no_processes=1):
    ''' Extract circuit properties by running tests generated using generate_test() function with calibration = True '''
    run_characterization(test_cfg, sim_cfg, report, no_processes)

  def backannotate_model(self, src_file, dst_file, lm_file):
    ''' Generate a complete model by back-annotating regression models to the
        intermediate Verilog model generated by generate_model() method '''
    self.ip.backannotate_model(src_file, dst_file, self.mc.get_config(), lm_file)

  def run_equivalence(self, test_cfg='test.cfg', sim_cfg='sim.cfg', report='report.html', no_processes=1):
    ''' Check model/circuit equivalence using mProbo '''
    run_equivalence(test_cfg, sim_cfg, report, no_processes)

  def __override_testcfg(self, syscfg_filename, usrcfg_filename):
    ''' Override user test configuration to the configuration generated from a template '''
    def write(cfg, filename):
      with open(filename, 'w') as f:
        cfg.write(f)
    cfg_sys = TestConfig(syscfg_filename, bypass=True, keep_raw=True).get_config()
    cfg_usr = TestConfig(usrcfg_filename, bypass=True, keep_raw=True).get_config()
    write(cfg_sys, syscfg_filename+'.bak')
    cfg_sys.merge(cfg_usr)
    write(cfg_sys, syscfg_filename)

  def _display_logo(self):
    ''' display tool logo '''
    self._logger.info(davemsg.LOGO_003.format(today=printToday()))

